import PropTypes from "prop-types";
import { TransformFunction } from "./factory";
import { Variables } from "./variables";
export declare type LimitedResponsiveBreakpointProps = Partial<{
    display: {
        value: Variables["displays"];
    };
    hide: {
        value: boolean;
    };
    textAlign: {
        value: Variables["textAlignments"];
    };
    textSize: {
        value: Variables["textSizes"];
    };
}>;
export declare type ResponsiveBreakpointProps = Partial<{
    display: {
        only?: boolean;
        value: Variables["displays"];
    };
    hide: {
        only?: boolean;
        value: boolean;
    };
    textAlign: {
        only?: boolean;
        value: Variables["textAlignments"];
    };
    textSize: {
        only?: boolean;
        value: Variables["textSizes"];
    };
}>;
export declare type ResponsiveHelpersProps = Partial<{
    responsive: Partial<{
        [B in Variables["breakpointsLimited"]]: LimitedResponsiveBreakpointProps;
    } & {
        [B in Exclude<Variables["breakpoints"], Variables["breakpointsLimited"]>]: ResponsiveBreakpointProps;
    }>;
}>;
export declare const makeResponsiveBreakpointPropTypes: (variables?: Partial<import("./variables").VariablesDefinitions> | undefined) => PropTypes.ValidationMap<any>;
export declare const makeResponsiveBreakpointLimitedPropTypes: (variables?: Partial<import("./variables").VariablesDefinitions> | undefined) => PropTypes.ValidationMap<any>;
export declare const makePropTypes: (variables?: Partial<import("./variables").VariablesDefinitions> | undefined) => PropTypes.ValidationMap<any>;
export declare const transform: TransformFunction<ResponsiveHelpersProps>;
export declare const makeValidatingTransform: import("./factory").MakeValidatingTransformFunction<Partial<{
    responsive: Partial<{
        touch: Partial<{
            display: {
                value: "block" | "inline" | "flex" | "inline-block" | "inline-flex";
            };
            hide: {
                value: boolean;
            };
            textAlign: {
                value: "left" | "right" | "centered" | "justified";
            };
            textSize: {
                value: 1 | 2 | 6 | 5 | 4 | 3;
            };
        }>;
        mobile: Partial<{
            display: {
                value: "block" | "inline" | "flex" | "inline-block" | "inline-flex";
            };
            hide: {
                value: boolean;
            };
            textAlign: {
                value: "left" | "right" | "centered" | "justified";
            };
            textSize: {
                value: 1 | 2 | 6 | 5 | 4 | 3;
            };
        }>;
        fullhd: Partial<{
            display: {
                value: "block" | "inline" | "flex" | "inline-block" | "inline-flex";
            };
            hide: {
                value: boolean;
            };
            textAlign: {
                value: "left" | "right" | "centered" | "justified";
            };
            textSize: {
                value: 1 | 2 | 6 | 5 | 4 | 3;
            };
        }>;
    } & {
        tablet: Partial<{
            display: {
                only?: boolean | undefined;
                value: "block" | "inline" | "flex" | "inline-block" | "inline-flex";
            };
            hide: {
                only?: boolean | undefined;
                value: boolean;
            };
            textAlign: {
                only?: boolean | undefined;
                value: "left" | "right" | "centered" | "justified";
            };
            textSize: {
                only?: boolean | undefined;
                value: 1 | 2 | 6 | 5 | 4 | 3;
            };
        }>;
        desktop: Partial<{
            display: {
                only?: boolean | undefined;
                value: "block" | "inline" | "flex" | "inline-block" | "inline-flex";
            };
            hide: {
                only?: boolean | undefined;
                value: boolean;
            };
            textAlign: {
                only?: boolean | undefined;
                value: "left" | "right" | "centered" | "justified";
            };
            textSize: {
                only?: boolean | undefined;
                value: 1 | 2 | 6 | 5 | 4 | 3;
            };
        }>;
        widescreen: Partial<{
            display: {
                only?: boolean | undefined;
                value: "block" | "inline" | "flex" | "inline-block" | "inline-flex";
            };
            hide: {
                only?: boolean | undefined;
                value: boolean;
            };
            textAlign: {
                only?: boolean | undefined;
                value: "left" | "right" | "centered" | "justified";
            };
            textSize: {
                only?: boolean | undefined;
                value: 1 | 2 | 6 | 5 | 4 | 3;
            };
        }>;
    }>;
}>>;
