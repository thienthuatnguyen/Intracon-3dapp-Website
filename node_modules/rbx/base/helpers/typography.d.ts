import PropTypes from "prop-types";
import { TransformFunction } from "./factory";
import { Variables } from "./variables";
export declare type TypographyHelpersProps = Partial<{
    backgroundColor: Variables["colors"] | Variables["shades"];
    italic: boolean;
    textAlign: Variables["textAlignments"];
    textColor: Variables["colors"] | Variables["shades"];
    textSize: Variables["textSizes"];
    textTransform: Variables["textTransforms"];
    textWeight: Variables["textWeights"];
}>;
export declare const makePropTypes: (variables?: Partial<import("./variables").VariablesDefinitions> | undefined) => PropTypes.ValidationMap<any>;
export declare const transform: TransformFunction<TypographyHelpersProps>;
export declare const makeValidatingTransform: import("./factory").MakeValidatingTransformFunction<Partial<{
    backgroundColor: "link" | "success" | "black" | "grey" | "white" | "dark" | "light" | "primary" | "info" | "warning" | "danger" | "black-bis" | "black-ter" | "grey-darker" | "grey-dark" | "grey-light" | "grey-lighter" | "white-ter" | "white-bis";
    italic: boolean;
    textAlign: "left" | "right" | "centered" | "justified";
    textColor: "link" | "success" | "black" | "grey" | "white" | "dark" | "light" | "primary" | "info" | "warning" | "danger" | "black-bis" | "black-ter" | "grey-darker" | "grey-dark" | "grey-light" | "grey-lighter" | "white-ter" | "white-bis";
    textSize: 1 | 2 | 6 | 5 | 4 | 3;
    textTransform: "lowercase" | "uppercase" | "capitalized";
    textWeight: "bold" | "normal" | "light" | "semibold";
}>>;
