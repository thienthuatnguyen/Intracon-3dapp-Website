import PropTypes from "prop-types";
import { Omit, ReturnType } from "../../types";
import { VariablesDefinitions } from "./variables";
export declare const makePropTypesFactory: MakePropTypesFactoryFunction;
export declare type MakeValidatingTransformFunction<T> = (variables?: Partial<VariablesDefinitions>) => (props: T, componentName: string, location?: string) => ReturnType<TransformFunction<T>>;
export declare const makeValidatingTransformFactory: <T extends {}>(makePropTypesFunc: (variables?: Partial<VariablesDefinitions> | undefined) => PropTypes.ValidationMap<any>, transformFunc: TransformFunction<T>) => MakeValidatingTransformFunction<T>;
export declare const makeRootValidatingTransformFactory: <TTransformProps extends {}>(...makeValidatingTransformFuncs: MakeValidatingTransformFunction<any>[]) => MakeValidatingTransformFunction<TTransformProps>;
declare type MakePropTypesFunction = (variables: VariablesDefinitions) => PropTypes.ValidationMap<any>;
declare type MakePropTypesFactoryFunction = (makePropTypes: MakePropTypesFunction) => (variables?: Partial<VariablesDefinitions>) => ReturnType<MakePropTypesFunction>;
export declare type TransformFunction<TTransformProps extends {}> = <TProps extends TTransformProps & {
    className?: string;
}>(props: TProps) => Omit<TProps, keyof TTransformProps>;
export declare type ValidatingTransformFunction<TTransformProps extends {}> = <TProps extends TTransformProps & {
    className?: string;
}>(props: TProps, componentName: string, location?: string) => ReturnType<TransformFunction<TTransformProps>>;
export {};
