import React from "react";
import { HelpersProps } from "./helpers";
import { ValidatingTransformFunction } from "./helpers/factory";
export interface ThemeContextValue<T = HelpersProps> {
    transform: ValidatingTransformFunction<T>;
}
export declare const initialValue: ThemeContextValue;
export declare const ThemeContext: React.Context<ThemeContextValue<import("../types").Prefer<import("./helpers").HelpersPropsOverrides, Partial<{
    clearfix: boolean;
    pull: "left" | "right";
}> & Partial<{
    clipped: boolean;
}> & Partial<{
    overlay: boolean;
}> & Partial<{
    backgroundColor: "link" | "success" | "black" | "grey" | "white" | "dark" | "light" | "primary" | "info" | "warning" | "danger" | "black-bis" | "black-ter" | "grey-darker" | "grey-dark" | "grey-light" | "grey-lighter" | "white-ter" | "white-bis";
    italic: boolean;
    textAlign: "left" | "right" | "centered" | "justified";
    textColor: "link" | "success" | "black" | "grey" | "white" | "dark" | "light" | "primary" | "info" | "warning" | "danger" | "black-bis" | "black-ter" | "grey-darker" | "grey-dark" | "grey-light" | "grey-lighter" | "white-ter" | "white-bis";
    textSize: 1 | 2 | 6 | 5 | 4 | 3;
    textTransform: "lowercase" | "uppercase" | "capitalized";
    textWeight: "bold" | "normal" | "light" | "semibold";
}> & Partial<{
    hidden: boolean;
    invisible: boolean;
    srOnly: boolean;
}> & Partial<{
    marginless: boolean;
    paddingless: boolean;
    radiusless: boolean;
    shadowless: boolean;
    unselectable: boolean;
}> & Partial<{
    responsive: Partial<{
        touch: Partial<{
            display: {
                value: "block" | "inline" | "flex" | "inline-block" | "inline-flex";
            };
            hide: {
                value: boolean;
            };
            textAlign: {
                value: "left" | "right" | "centered" | "justified";
            };
            textSize: {
                value: 1 | 2 | 6 | 5 | 4 | 3;
            };
        }>;
        mobile: Partial<{
            display: {
                value: "block" | "inline" | "flex" | "inline-block" | "inline-flex";
            };
            hide: {
                value: boolean;
            };
            textAlign: {
                value: "left" | "right" | "centered" | "justified";
            };
            textSize: {
                value: 1 | 2 | 6 | 5 | 4 | 3;
            };
        }>;
        fullhd: Partial<{
            display: {
                value: "block" | "inline" | "flex" | "inline-block" | "inline-flex";
            };
            hide: {
                value: boolean;
            };
            textAlign: {
                value: "left" | "right" | "centered" | "justified";
            };
            textSize: {
                value: 1 | 2 | 6 | 5 | 4 | 3;
            };
        }>;
    } & {
        tablet: Partial<{
            display: {
                only?: boolean | undefined;
                value: "block" | "inline" | "flex" | "inline-block" | "inline-flex";
            };
            hide: {
                only?: boolean | undefined;
                value: boolean;
            };
            textAlign: {
                only?: boolean | undefined;
                value: "left" | "right" | "centered" | "justified";
            };
            textSize: {
                only?: boolean | undefined;
                value: 1 | 2 | 6 | 5 | 4 | 3;
            };
        }>;
        desktop: Partial<{
            display: {
                only?: boolean | undefined;
                value: "block" | "inline" | "flex" | "inline-block" | "inline-flex";
            };
            hide: {
                only?: boolean | undefined;
                value: boolean;
            };
            textAlign: {
                only?: boolean | undefined;
                value: "left" | "right" | "centered" | "justified";
            };
            textSize: {
                only?: boolean | undefined;
                value: 1 | 2 | 6 | 5 | 4 | 3;
            };
        }>;
        widescreen: Partial<{
            display: {
                only?: boolean | undefined;
                value: "block" | "inline" | "flex" | "inline-block" | "inline-flex";
            };
            hide: {
                only?: boolean | undefined;
                value: boolean;
            };
            textAlign: {
                only?: boolean | undefined;
                value: "left" | "right" | "centered" | "justified";
            };
            textSize: {
                only?: boolean | undefined;
                value: 1 | 2 | 6 | 5 | 4 | 3;
            };
        }>;
    }>;
}> & {
    className?: string | undefined;
}>>>;
