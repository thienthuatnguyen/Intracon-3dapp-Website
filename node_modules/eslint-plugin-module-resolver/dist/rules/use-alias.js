"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var findBabelConfig = require('find-babel-config'); //------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------


var values = Object.values || function (obj) {
  return Object.keys(obj).map(function (e) {
    return obj[e];
  });
};

module.exports = {
  meta: {
    docs: {
      description: 'Warn when using relative paths to modules aliased',
      category: 'Fill me in',
      recommended: false
    },
    fixable: null,
    // or "code" or "whitespace"
    schema: [// fill in your schema
    ]
  },
  create: function create(context) {
    var _findBabelConfig$sync = findBabelConfig.sync('.'),
        config = _findBabelConfig$sync.config; // try/catch
    // handle name collision with package.json


    var alias = config.plugins.reduce(function (mem, curr) {
      if (Array.isArray(curr) && curr[0] === 'babel-plugin-module-resolver') {
        return curr[1].alias;
      }

      return mem;
    }, {});
    var normalizedAlias = values(alias).map(function (a) {
      return a.replace(/\.?\.\//g, '');
    });
    var aliasSet = new Set(normalizedAlias);

    var hasError = function hasError(val) {
      if (!val) return; // template literals will have undefined val

      var rep = val.replace(/\.?\.\//g, '');

      var _rep$split = rep.split('/'),
          _rep$split2 = _slicedToArray(_rep$split, 1),
          root = _rep$split2[0];

      return aliasSet.has(root) && val.match(/\.?\.\//);
    };

    return {
      ImportDeclaration: function ImportDeclaration(node) {
        if (hasError(node.source.value)) {
          context.report({
            node: node,
            message: 'Do not use relative path for aliased modules',
            loc: node.source.loc
          });
        }
      },
      CallExpression: function CallExpression(node) {
        var val = node.callee.name || node.callee.type;

        if (val === 'Import' || val === 'require') {
          hasError(node.arguments[0].value) && context.report({
            node: node,
            message: 'Do not use relative path for aliased modules',
            loc: node.arguments[0].loc
          });
        }
      }
    };
  }
};