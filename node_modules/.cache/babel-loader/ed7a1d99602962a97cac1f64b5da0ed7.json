{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { makePropTypesFactory, makeValidatingTransformFactory } from \"./factory\";\nexport const makePropTypes = makePropTypesFactory(vars => ({\n  hidden: PropTypes.bool,\n  invisible: PropTypes.bool,\n  srOnly: PropTypes.bool\n}));\nexport const transform = props => {\n  const hidden = props.hidden,\n        invisible = props.invisible,\n        srOnly = props.srOnly,\n        rest = tslib_1.__rest(props, [\"hidden\", \"invisible\", \"srOnly\"]);\n\n  rest.className = classNames({\n    \"is-hidden\": hidden,\n    \"is-invisible\": invisible,\n    \"is-sr-only\": srOnly\n  }, rest.className);\n  return rest;\n};\nexport const makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);","map":{"version":3,"sources":["../../../src/base/helpers/visibility.ts"],"names":[],"mappings":";AAAA,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,SAAP,MAAsB,YAAtB;AAEA,SACE,oBADF,EAEE,8BAFF,QAIO,WAJP;AAmBA,OAAO,MAAM,aAAa,GAAG,oBAAoB,CAAC,IAAI,KAAK;AACzD,EAAA,MAAM,EAAE,SAAS,CAAC,IADuC;AAEzD,EAAA,SAAS,EAAE,SAAS,CAAC,IAFoC;AAGzD,EAAA,MAAM,EAAE,SAAS,CAAC;AAHuC,CAAL,CAAL,CAA1C;AAMP,OAAO,MAAM,SAAS,GAA8C,KAAK,IAAG;AAAA,QAClE,MADkE,GAC3B,KAD2B,CAClE,MADkE;AAAA,QAC1D,SAD0D,GAC3B,KAD2B,CAC1D,SAD0D;AAAA,QAC/C,MAD+C,GAC3B,KAD2B,CAC/C,MAD+C;AAAA,QACvC,IADuC,GACvC,OAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA,QAAA,EAAA,WAAA,EAAA,QAAA,CAAA,CADuC;;AAOzE,EAAA,IAAY,CAAC,SAAb,GAAyB,UAAU,CAClC;AACE,iBAAa,MADf;AAEE,oBAAgB,SAFlB;AAGE,kBAAc;AAHhB,GADkC,EAMjC,IAAY,CAAC,SANoB,CAAnC;AASD,SAAO,IAAP;AACD,CAjBM;AAmBP,OAAO,MAAM,uBAAuB,GAAG,8BAA8B,CACnE,aADmE,EAEnE,SAFmE,CAA9D","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { makePropTypesFactory, makeValidatingTransformFactory, } from \"./factory\";\nexport const makePropTypes = makePropTypesFactory(vars => ({\n    hidden: PropTypes.bool,\n    invisible: PropTypes.bool,\n    srOnly: PropTypes.bool,\n}));\nexport const transform = props => {\n    const { hidden, invisible, srOnly } = props, rest = tslib_1.__rest(props, [\"hidden\", \"invisible\", \"srOnly\"]);\n    rest.className = classNames({\n        \"is-hidden\": hidden,\n        \"is-invisible\": invisible,\n        \"is-sr-only\": srOnly,\n    }, rest.className);\n    return rest;\n};\nexport const makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);\n//# sourceMappingURL=visibility.js.map"]},"metadata":{},"sourceType":"module"}