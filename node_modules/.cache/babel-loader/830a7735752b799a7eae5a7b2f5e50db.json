{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport PropTypes from \"prop-types\";\nimport { DEFAULTS } from \"./variables\";\nexport const makePropTypesFactory = makePropTypes => variables => makePropTypes(_Object$assign({}, DEFAULTS, variables));\nexport const makeValidatingTransformFactory = (makePropTypesFunc, transformFunc) => (variables = DEFAULTS) => {\n  const propTypes = makePropTypesFunc(variables);\n  return (props, componentName, location = \"prop\") => {\n    PropTypes.checkPropTypes(propTypes, props, location, componentName);\n    return transformFunc(props);\n  };\n};\nexport const makeRootValidatingTransformFactory = (...makeValidatingTransformFuncs) => (variables = DEFAULTS) => {\n  const validatingTransformFuncs = makeValidatingTransformFuncs.map(func => func(variables));\n  return (props, componentName, location = \"prop\") => validatingTransformFuncs.reduce((acc, func) => func(acc, componentName, location), props);\n};","map":{"version":3,"sources":["../../../src/base/helpers/factory.ts"],"names":[],"mappings":";AAAA,OAAO,SAAP,MAAsB,YAAtB;AAGA,SAAS,QAAT,QAA+C,aAA/C;AAEA,OAAO,MAAM,oBAAoB,GAAiC,aAAa,IAAI,SAAS,IAC1F,aAAa,CAAA,eAAA,EAAA,EAAM,QAAN,EAAmB,SAAnB,CAAA,CADR;AAWP,OAAO,MAAM,8BAA8B,GAAG,CAC5C,iBAD4C,EAE5C,aAF4C,KAGL,CAAC,SAAS,GAAG,QAAb,KAAyB;AAChE,QAAM,SAAS,GAAG,iBAAiB,CAAC,SAAD,CAAnC;AAEA,SAAO,CACL,KADK,EAEL,aAFK,EAGL,QAAA,GAAmB,MAHd,KAI+B;AACpC,IAAA,SAAS,CAAC,cAAV,CAAyB,SAAzB,EAAoC,KAApC,EAA2C,QAA3C,EAAqD,aAArD;AAKA,WAAO,aAAa,CAAC,KAAD,CAApB;AACD,GAXD;AAYD,CAlBM;AAoBP,OAAO,MAAM,kCAAkC,GAAG,CAEhD,GAAG,4BAF6C,KAGK,CACrD,SAAS,GAAG,QADyC,KAEL;AAChD,QAAM,wBAAwB,GAAG,4BAA4B,CAAC,GAA7B,CAAiC,IAAI,IACpE,IAAI,CAAC,SAAD,CAD2B,CAAjC;AAIA,SAAO,CAAC,KAAD,EAAQ,aAAR,EAAuB,QAAQ,GAAG,MAAlC,KACL,wBAAwB,CAAC,MAAzB,CAEE,CAAC,GAAD,EAAM,IAAN,KAAe,IAAI,CAAC,GAAD,EAAM,aAAN,EAAqB,QAArB,CAFrB,EAGE,KAHF,CADF;AAMD,CAhBM","sourceRoot":"","sourcesContent":["import PropTypes from \"prop-types\";\nimport { DEFAULTS } from \"./variables\";\nexport const makePropTypesFactory = makePropTypes => variables => makePropTypes(Object.assign({}, DEFAULTS, variables));\nexport const makeValidatingTransformFactory = (makePropTypesFunc, transformFunc) => (variables = DEFAULTS) => {\n    const propTypes = makePropTypesFunc(variables);\n    return (props, componentName, location = \"prop\") => {\n        PropTypes.checkPropTypes(propTypes, props, location, componentName);\n        return transformFunc(props);\n    };\n};\nexport const makeRootValidatingTransformFactory = (...makeValidatingTransformFuncs) => (variables = DEFAULTS) => {\n    const validatingTransformFuncs = makeValidatingTransformFuncs.map(func => func(variables));\n    return (props, componentName, location = \"prop\") => validatingTransformFuncs.reduce((acc, func) => func(acc, componentName, location), props);\n};\n//# sourceMappingURL=factory.js.map"]},"metadata":{},"sourceType":"module"}