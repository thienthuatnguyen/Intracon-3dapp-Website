{"ast":null,"code":"\"use strict\";\n/* global __NEXT_DATA__ */\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/assign\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/slicedToArray\"));\n\nvar _set = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/set\"));\n\nvar __importDefault = void 0 && (void 0).__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst url_1 = require(\"url\");\n\nconst mitt_1 = __importDefault(require(\"../mitt\"));\n\nconst shallow_equals_1 = __importDefault(require(\"./shallow-equals\"));\n\nconst utils_1 = require(\"../utils\");\n\nclass Router {\n  constructor(pathname, query, as, {\n    initialProps,\n    pageLoader,\n    App,\n    Component,\n    err\n  } = {}) {\n    this.onPopState = e => {\n      if (!e.state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const pathname = this.pathname,\n              query = this.query;\n        this.changeState('replaceState', utils_1.formatWithValidation({\n          pathname,\n          query\n        }), utils_1.getURL());\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (!this._beforePopState(e.state)) {\n        return;\n      }\n\n      const _e$state = e.state,\n            url = _e$state.url,\n            as = _e$state.as,\n            options = _e$state.options;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof url === 'undefined' || typeof as === 'undefined') {\n          console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n        }\n      }\n\n      this.replace(url, as, options);\n    }; // represents the current component key\n\n\n    this.route = toRoute(pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        props: initialProps,\n        err\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    this.subscriptions = new _set.default();\n    this.componentLoadCancel = null;\n\n    this._beforePopState = () => true;\n\n    if (typeof window !== 'undefined') {\n      // in order for `e.state` to work on the `onpopstate` event\n      // we have to register the initial route upon initialization\n      this.changeState('replaceState', utils_1.formatWithValidation({\n        pathname,\n        query\n      }), as);\n      window.addEventListener('popstate', this.onPopState);\n    }\n  }\n\n  static _rewriteUrlForNextExport(url) {\n    const _url$split = url.split('#'),\n          _url$split2 = (0, _slicedToArray2.default)(_url$split, 2),\n          hash = _url$split2[1];\n\n    url = url.replace(/#.*/, '');\n\n    let _url$split3 = url.split('?'),\n        _url$split4 = (0, _slicedToArray2.default)(_url$split3, 2),\n        path = _url$split4[0],\n        qs = _url$split4[1];\n\n    path = path.replace(/\\/$/, '');\n    let newPath = path; // Append a trailing slash if this path does not have an extension\n\n    if (!/\\.[^/]+\\/?$/.test(path)) {\n      newPath = `${path}/`;\n    }\n\n    if (qs) {\n      newPath = `${newPath}?${qs}`;\n    }\n\n    if (hash) {\n      newPath = `${newPath}#${hash}`;\n    }\n\n    return newPath;\n  }\n\n  update(route, Component) {\n    const data = this.components[route];\n\n    if (!data) {\n      throw new Error(`Cannot update unavailable route: ${route}`);\n    }\n\n    const newData = (0, _assign.default)({}, data, {\n      Component\n    });\n    this.components[route] = newData; // pages/_app.js updated\n\n    if (route === '/_app') {\n      this.notify(this.components[this.route]);\n      return;\n    }\n\n    if (route === this.route) {\n      this.notify(newData);\n    }\n  }\n\n  async reload(route) {\n    delete this.components[route];\n    this.pageLoader.clearCache(route);\n    if (route !== this.route) return;\n    const pathname = this.pathname,\n          query = this.query;\n    const url = window.location.href; // This makes sure we only use pathname + query + hash, to mirror `asPath` coming from the server.\n\n    const as = window.location.pathname + window.location.search + window.location.hash;\n    Router.events.emit('routeChangeStart', url);\n    const routeInfo = await this.getRouteInfo(route, pathname, query, as);\n    const error = routeInfo.error;\n\n    if (error && error.cancelled) {\n      return;\n    }\n\n    this.notify(routeInfo);\n\n    if (error) {\n      Router.events.emit('routeChangeError', error, url);\n      throw error;\n    }\n\n    Router.events.emit('routeChangeComplete', url);\n  }\n\n  back() {\n    window.history.back();\n  }\n\n  push(url, as = url, options = {}) {\n    return this.change('pushState', url, as, options);\n  }\n\n  replace(url, as = url, options = {}) {\n    return this.change('replaceState', url, as, options);\n  }\n\n  async change(method, _url, _as, options) {\n    // If url and as provided as an object representation,\n    // we'll format them into the string version here.\n    const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n    let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as; // Add the ending slash to the paths. So, we can serve the\n    // \"<page>/index.html\" directly for the SSR page.\n\n    if (__NEXT_DATA__.nextExport) {\n      as = Router._rewriteUrlForNextExport(as);\n    }\n\n    this.abortComponentLoad(as); // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n\n    if (this.onlyAHashChange(as)) {\n      Router.events.emit('hashChangeStart', as);\n      this.changeState(method, url, as);\n      this.scrollToHash(as);\n      Router.events.emit('hashChangeComplete', as);\n      return true;\n    }\n\n    const _url_1$parse = url_1.parse(url, true),\n          pathname = _url_1$parse.pathname,\n          query = _url_1$parse.query; // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n\n\n    if (!this.urlIsNew(as)) {\n      method = 'replaceState';\n    }\n\n    const route = toRoute(pathname);\n    const _options$shallow = options.shallow,\n          shallow = _options$shallow === void 0 ? false : _options$shallow;\n    let routeInfo = null;\n    Router.events.emit('routeChangeStart', as); // If shallow === false and other conditions met, we reuse the\n    // existing routeInfo for this route.\n    // Because of this, getInitialProps would not run.\n\n    if (shallow && this.isShallowRoutingPossible(route)) {\n      routeInfo = this.components[route];\n    } else {\n      routeInfo = await this.getRouteInfo(route, pathname, query, as);\n    }\n\n    const _routeInfo = routeInfo,\n          error = _routeInfo.error;\n\n    if (error && error.cancelled) {\n      return false;\n    }\n\n    Router.events.emit('beforeHistoryChange', as);\n    this.changeState(method, url, as, options);\n    const hash = window.location.hash.substring(1);\n    this.set(route, pathname, query, as, (0, _assign.default)({}, routeInfo, {\n      hash\n    }));\n\n    if (error) {\n      Router.events.emit('routeChangeError', error, as);\n      throw error;\n    }\n\n    Router.events.emit('routeChangeComplete', as);\n    return true;\n  }\n\n  changeState(method, url, as, options = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n\n    if (method !== 'pushState' || utils_1.getURL() !== as) {\n      window.history[method]({\n        url,\n        as,\n        options\n      }, null, as);\n    }\n  }\n\n  async getRouteInfo(route, pathname, query, as) {\n    let routeInfo = null;\n\n    try {\n      routeInfo = this.components[route];\n\n      if (!routeInfo) {\n        routeInfo = {\n          Component: await this.fetchComponent(route, as)\n        };\n      }\n\n      const _routeInfo2 = routeInfo,\n            Component = _routeInfo2.Component;\n\n      if (process.env.NODE_ENV !== 'production') {\n        const _require = require('react-is'),\n              isValidElementType = _require.isValidElementType;\n\n        if (!isValidElementType(Component)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n\n      const ctx = {\n        pathname,\n        query,\n        asPath: as\n      };\n      routeInfo.props = await this.getInitialProps(Component, ctx);\n      this.components[route] = routeInfo;\n    } catch (err) {\n      if (err.code === 'PAGE_LOAD_ERROR') {\n        // If we can't load the page it could be one of following reasons\n        //  1. Page doesn't exists\n        //  2. Page does exist in a different zone\n        //  3. Internal error while loading the page\n        // So, doing a hard reload is the proper way to deal with this.\n        window.location.href = as; // Changing the URL doesn't block executing the current code path.\n        // So, we need to mark it as a cancelled error and stop the routing logic.\n\n        err.cancelled = true;\n        return {\n          error: err\n        };\n      }\n\n      if (err.cancelled) {\n        return {\n          error: err\n        };\n      }\n\n      const Component = await this.fetchComponent('/_error');\n      routeInfo = {\n        Component,\n        err\n      };\n      const ctx = {\n        err,\n        pathname,\n        query\n      };\n\n      try {\n        routeInfo.props = await this.getInitialProps(Component, ctx);\n      } catch (err) {\n        console.error('Error in error page `getInitialProps`: ', err);\n        routeInfo.props = {};\n      }\n\n      routeInfo.error = err;\n    }\n\n    return routeInfo;\n  }\n\n  set(route, pathname, query, as, data) {\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    this.notify(data);\n  }\n\n  beforePopState(cb) {\n    this._beforePopState = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n\n    const _this$asPath$split = this.asPath.split('#'),\n          _this$asPath$split2 = (0, _slicedToArray2.default)(_this$asPath$split, 2),\n          oldUrlNoHash = _this$asPath$split2[0],\n          oldHash = _this$asPath$split2[1];\n\n    const _as$split = as.split('#'),\n          _as$split2 = (0, _slicedToArray2.default)(_as$split, 2),\n          newUrlNoHash = _as$split2[0],\n          newHash = _as$split2[1]; // Makes sure we scroll to the provided hash if the url/hash are the same\n\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    const _as$split3 = as.split('#'),\n          _as$split4 = (0, _slicedToArray2.default)(_as$split3, 2),\n          hash = _as$split4[1]; // Scroll to top if the hash is just `#` with no value\n\n\n    if (hash === '') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n\n\n    const idEl = document.getElementById(hash);\n\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    const nameEl = document.getElementsByName(hash)[0];\n\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n\n  urlIsNew(asPath) {\n    const _url_1$parse2 = url_1.parse(asPath, true),\n          pathname = _url_1$parse2.pathname,\n          query = _url_1$parse2.query;\n\n    const _url_1$parse3 = url_1.parse(this.asPath, true),\n          curPathname = _url_1$parse3.pathname;\n\n    return curPathname !== pathname || !shallow_equals_1.default(query, this.query);\n  }\n\n  isShallowRoutingPossible(route) {\n    return (// If there's cached routeInfo for the route.\n      Boolean(this.components[route]) && // If the route is already rendered on the screen.\n      this.route === route\n    );\n  }\n\n  async prefetch(url) {\n    // We don't add support for prefetch in the development mode.\n    // If we do that, our on-demand-entries optimization won't performs better\n    if (process.env.NODE_ENV === 'development') return;\n\n    const _url_1$parse4 = url_1.parse(url),\n          pathname = _url_1$parse4.pathname;\n\n    const route = toRoute(pathname);\n    return this.pageLoader.prefetch(route);\n  }\n\n  async fetchComponent(route, as) {\n    let cancelled = false;\n\n    const cancel = this.componentLoadCancel = function () {\n      cancelled = true;\n    };\n\n    const Component = await this.fetchRoute(route);\n\n    if (cancelled) {\n      const error = new Error(`Abort fetching component for route: \"${route}\"`);\n      error.cancelled = true;\n      throw error;\n    }\n\n    if (cancel === this.componentLoadCancel) {\n      this.componentLoadCancel = null;\n    }\n\n    return Component;\n  }\n\n  async getInitialProps(Component, ctx) {\n    let cancelled = false;\n\n    const cancel = () => {\n      cancelled = true;\n    };\n\n    this.componentLoadCancel = cancel;\n    const App = this.components['/_app'].Component;\n    const props = await utils_1.loadGetInitialProps(App, {\n      Component,\n      router: this,\n      ctx\n    });\n\n    if (cancel === this.componentLoadCancel) {\n      this.componentLoadCancel = null;\n    }\n\n    if (cancelled) {\n      const err = new Error('Loading initial props cancelled');\n      err.cancelled = true;\n      throw err;\n    }\n\n    return props;\n  }\n\n  async fetchRoute(route) {\n    return this.pageLoader.loadPage(route);\n  }\n\n  abortComponentLoad(as) {\n    if (this.componentLoadCancel) {\n      Router.events.emit('routeChangeError', new Error('Route Cancelled'), as);\n      this.componentLoadCancel();\n      this.componentLoadCancel = null;\n    }\n  }\n\n  notify(data) {\n    const App = this.components['/_app'].Component;\n    this.subscriptions.forEach(fn => fn((0, _assign.default)({}, data, {\n      App\n    })));\n  }\n\n  subscribe(fn) {\n    this.subscriptions.add(fn);\n    return () => this.subscriptions.delete(fn);\n  }\n\n}\n\nRouter.events = mitt_1.default();\nexports.default = Router;\n\nfunction toRoute(path) {\n  return path.replace(/\\/$/, '') || '/';\n}","map":{"version":3,"sources":["/Users/mac/Documents/Intracon-3dapp-Website/node_modules/next-server/dist/lib/router/router.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","url_1","require","mitt_1","shallow_equals_1","utils_1","Router","constructor","pathname","query","as","initialProps","pageLoader","App","Component","err","onPopState","e","state","changeState","formatWithValidation","getURL","_beforePopState","url","options","process","env","NODE_ENV","console","warn","replace","route","toRoute","components","props","events","asPath","subscriptions","componentLoadCancel","window","addEventListener","_rewriteUrlForNextExport","split","hash","path","qs","newPath","test","update","data","Error","newData","notify","reload","clearCache","location","href","search","emit","routeInfo","getRouteInfo","error","cancelled","back","history","push","change","method","_url","_as","__NEXT_DATA__","nextExport","abortComponentLoad","onlyAHashChange","scrollToHash","parse","urlIsNew","shallow","isShallowRoutingPossible","substring","set","fetchComponent","isValidElementType","ctx","getInitialProps","code","beforePopState","cb","oldUrlNoHash","oldHash","newUrlNoHash","newHash","scrollTo","idEl","document","getElementById","scrollIntoView","nameEl","getElementsByName","curPathname","default","Boolean","prefetch","cancel","fetchRoute","loadGetInitialProps","router","loadPage","forEach","fn","subscribe","add","delete"],"mappings":"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","sourcesContent":["\"use strict\";\n/* global __NEXT_DATA__ */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = require(\"url\");\nconst mitt_1 = __importDefault(require(\"../mitt\"));\nconst shallow_equals_1 = __importDefault(require(\"./shallow-equals\"));\nconst utils_1 = require(\"../utils\");\nclass Router {\n    constructor(pathname, query, as, { initialProps, pageLoader, App, Component, err } = {}) {\n        this.onPopState = e => {\n            if (!e.state) {\n                // We get state as undefined for two reasons.\n                //  1. With older safari (< 8) and older chrome (< 34)\n                //  2. When the URL changed with #\n                //\n                // In the both cases, we don't need to proceed and change the route.\n                // (as it's already changed)\n                // But we can simply replace the state with the new changes.\n                // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n                // So, doing the following for (1) does no harm.\n                const { pathname, query } = this;\n                this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), utils_1.getURL());\n                return;\n            }\n            // If the downstream application returns falsy, return.\n            // They will then be responsible for handling the event.\n            if (!this._beforePopState(e.state)) {\n                return;\n            }\n            const { url, as, options } = e.state;\n            if (process.env.NODE_ENV !== 'production') {\n                if (typeof url === 'undefined' || typeof as === 'undefined') {\n                    console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n                }\n            }\n            this.replace(url, as, options);\n        };\n        // represents the current component key\n        this.route = toRoute(pathname);\n        // set up the component cache (by route keys)\n        this.components = {};\n        // We should not keep the cache, if there's an error\n        // Otherwise, this cause issues when when going back and\n        // come again to the errored page.\n        if (pathname !== '/_error') {\n            this.components[this.route] = { Component, props: initialProps, err };\n        }\n        this.components['/_app'] = { Component: App };\n        // Backwards compat for Router.router.events\n        // TODO: Should be remove the following major version as it was never documented\n        this.events = Router.events;\n        this.pageLoader = pageLoader;\n        this.pathname = pathname;\n        this.query = query;\n        this.asPath = as;\n        this.subscriptions = new Set();\n        this.componentLoadCancel = null;\n        this._beforePopState = () => true;\n        if (typeof window !== 'undefined') {\n            // in order for `e.state` to work on the `onpopstate` event\n            // we have to register the initial route upon initialization\n            this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), as);\n            window.addEventListener('popstate', this.onPopState);\n        }\n    }\n    static _rewriteUrlForNextExport(url) {\n        const [, hash] = url.split('#');\n        url = url.replace(/#.*/, '');\n        let [path, qs] = url.split('?');\n        path = path.replace(/\\/$/, '');\n        let newPath = path;\n        // Append a trailing slash if this path does not have an extension\n        if (!/\\.[^/]+\\/?$/.test(path)) {\n            newPath = `${path}/`;\n        }\n        if (qs) {\n            newPath = `${newPath}?${qs}`;\n        }\n        if (hash) {\n            newPath = `${newPath}#${hash}`;\n        }\n        return newPath;\n    }\n    update(route, Component) {\n        const data = this.components[route];\n        if (!data) {\n            throw new Error(`Cannot update unavailable route: ${route}`);\n        }\n        const newData = Object.assign({}, data, { Component });\n        this.components[route] = newData;\n        // pages/_app.js updated\n        if (route === '/_app') {\n            this.notify(this.components[this.route]);\n            return;\n        }\n        if (route === this.route) {\n            this.notify(newData);\n        }\n    }\n    async reload(route) {\n        delete this.components[route];\n        this.pageLoader.clearCache(route);\n        if (route !== this.route)\n            return;\n        const { pathname, query } = this;\n        const url = window.location.href;\n        // This makes sure we only use pathname + query + hash, to mirror `asPath` coming from the server.\n        const as = window.location.pathname + window.location.search + window.location.hash;\n        Router.events.emit('routeChangeStart', url);\n        const routeInfo = await this.getRouteInfo(route, pathname, query, as);\n        const { error } = routeInfo;\n        if (error && error.cancelled) {\n            return;\n        }\n        this.notify(routeInfo);\n        if (error) {\n            Router.events.emit('routeChangeError', error, url);\n            throw error;\n        }\n        Router.events.emit('routeChangeComplete', url);\n    }\n    back() {\n        window.history.back();\n    }\n    push(url, as = url, options = {}) {\n        return this.change('pushState', url, as, options);\n    }\n    replace(url, as = url, options = {}) {\n        return this.change('replaceState', url, as, options);\n    }\n    async change(method, _url, _as, options) {\n        // If url and as provided as an object representation,\n        // we'll format them into the string version here.\n        const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n        let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as;\n        // Add the ending slash to the paths. So, we can serve the\n        // \"<page>/index.html\" directly for the SSR page.\n        if (__NEXT_DATA__.nextExport) {\n            as = Router._rewriteUrlForNextExport(as);\n        }\n        this.abortComponentLoad(as);\n        // If the url change is only related to a hash change\n        // We should not proceed. We should only change the state.\n        if (this.onlyAHashChange(as)) {\n            Router.events.emit('hashChangeStart', as);\n            this.changeState(method, url, as);\n            this.scrollToHash(as);\n            Router.events.emit('hashChangeComplete', as);\n            return true;\n        }\n        const { pathname, query } = url_1.parse(url, true);\n        // If asked to change the current URL we should reload the current page\n        // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n        // We also need to set the method = replaceState always\n        // as this should not go into the history (That's how browsers work)\n        // We should compare the new asPath to the current asPath, not the url\n        if (!this.urlIsNew(as)) {\n            method = 'replaceState';\n        }\n        const route = toRoute(pathname);\n        const { shallow = false } = options;\n        let routeInfo = null;\n        Router.events.emit('routeChangeStart', as);\n        // If shallow === false and other conditions met, we reuse the\n        // existing routeInfo for this route.\n        // Because of this, getInitialProps would not run.\n        if (shallow && this.isShallowRoutingPossible(route)) {\n            routeInfo = this.components[route];\n        }\n        else {\n            routeInfo = await this.getRouteInfo(route, pathname, query, as);\n        }\n        const { error } = routeInfo;\n        if (error && error.cancelled) {\n            return false;\n        }\n        Router.events.emit('beforeHistoryChange', as);\n        this.changeState(method, url, as, options);\n        const hash = window.location.hash.substring(1);\n        this.set(route, pathname, query, as, Object.assign({}, routeInfo, { hash }));\n        if (error) {\n            Router.events.emit('routeChangeError', error, as);\n            throw error;\n        }\n        Router.events.emit('routeChangeComplete', as);\n        return true;\n    }\n    changeState(method, url, as, options = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof window.history === 'undefined') {\n                console.error(`Warning: window.history is not available.`);\n                return;\n            }\n            if (typeof window.history[method] === 'undefined') {\n                console.error(`Warning: window.history.${method} is not available`);\n                return;\n            }\n        }\n        if (method !== 'pushState' || utils_1.getURL() !== as) {\n            window.history[method]({ url, as, options }, null, as);\n        }\n    }\n    async getRouteInfo(route, pathname, query, as) {\n        let routeInfo = null;\n        try {\n            routeInfo = this.components[route];\n            if (!routeInfo) {\n                routeInfo = { Component: await this.fetchComponent(route, as) };\n            }\n            const { Component } = routeInfo;\n            if (process.env.NODE_ENV !== 'production') {\n                const { isValidElementType } = require('react-is');\n                if (!isValidElementType(Component)) {\n                    throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n                }\n            }\n            const ctx = { pathname, query, asPath: as };\n            routeInfo.props = await this.getInitialProps(Component, ctx);\n            this.components[route] = routeInfo;\n        }\n        catch (err) {\n            if (err.code === 'PAGE_LOAD_ERROR') {\n                // If we can't load the page it could be one of following reasons\n                //  1. Page doesn't exists\n                //  2. Page does exist in a different zone\n                //  3. Internal error while loading the page\n                // So, doing a hard reload is the proper way to deal with this.\n                window.location.href = as;\n                // Changing the URL doesn't block executing the current code path.\n                // So, we need to mark it as a cancelled error and stop the routing logic.\n                err.cancelled = true;\n                return { error: err };\n            }\n            if (err.cancelled) {\n                return { error: err };\n            }\n            const Component = await this.fetchComponent('/_error');\n            routeInfo = { Component, err };\n            const ctx = { err, pathname, query };\n            try {\n                routeInfo.props = await this.getInitialProps(Component, ctx);\n            }\n            catch (err) {\n                console.error('Error in error page `getInitialProps`: ', err);\n                routeInfo.props = {};\n            }\n            routeInfo.error = err;\n        }\n        return routeInfo;\n    }\n    set(route, pathname, query, as, data) {\n        this.route = route;\n        this.pathname = pathname;\n        this.query = query;\n        this.asPath = as;\n        this.notify(data);\n    }\n    beforePopState(cb) {\n        this._beforePopState = cb;\n    }\n    onlyAHashChange(as) {\n        if (!this.asPath)\n            return false;\n        const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n        const [newUrlNoHash, newHash] = as.split('#');\n        // Makes sure we scroll to the provided hash if the url/hash are the same\n        if (newHash && (oldUrlNoHash === newUrlNoHash) && (oldHash === newHash)) {\n            return true;\n        }\n        // If the urls are change, there's more than a hash change\n        if (oldUrlNoHash !== newUrlNoHash) {\n            return false;\n        }\n        // If the hash has changed, then it's a hash only change.\n        // This check is necessary to handle both the enter and\n        // leave hash === '' cases. The identity case falls through\n        // and is treated as a next reload.\n        return oldHash !== newHash;\n    }\n    scrollToHash(as) {\n        const [, hash] = as.split('#');\n        // Scroll to top if the hash is just `#` with no value\n        if (hash === '') {\n            window.scrollTo(0, 0);\n            return;\n        }\n        // First we check if the element by id is found\n        const idEl = document.getElementById(hash);\n        if (idEl) {\n            idEl.scrollIntoView();\n            return;\n        }\n        // If there's no element with the id, we check the `name` property\n        // To mirror browsers\n        const nameEl = document.getElementsByName(hash)[0];\n        if (nameEl) {\n            nameEl.scrollIntoView();\n        }\n    }\n    urlIsNew(asPath) {\n        const { pathname, query } = url_1.parse(asPath, true);\n        const { pathname: curPathname } = url_1.parse(this.asPath, true);\n        return curPathname !== pathname || !shallow_equals_1.default(query, this.query);\n    }\n    isShallowRoutingPossible(route) {\n        return (\n        // If there's cached routeInfo for the route.\n        Boolean(this.components[route]) &&\n            // If the route is already rendered on the screen.\n            this.route === route);\n    }\n    async prefetch(url) {\n        // We don't add support for prefetch in the development mode.\n        // If we do that, our on-demand-entries optimization won't performs better\n        if (process.env.NODE_ENV === 'development')\n            return;\n        const { pathname } = url_1.parse(url);\n        const route = toRoute(pathname);\n        return this.pageLoader.prefetch(route);\n    }\n    async fetchComponent(route, as) {\n        let cancelled = false;\n        const cancel = this.componentLoadCancel = function () {\n            cancelled = true;\n        };\n        const Component = await this.fetchRoute(route);\n        if (cancelled) {\n            const error = new Error(`Abort fetching component for route: \"${route}\"`);\n            error.cancelled = true;\n            throw error;\n        }\n        if (cancel === this.componentLoadCancel) {\n            this.componentLoadCancel = null;\n        }\n        return Component;\n    }\n    async getInitialProps(Component, ctx) {\n        let cancelled = false;\n        const cancel = () => { cancelled = true; };\n        this.componentLoadCancel = cancel;\n        const { Component: App } = this.components['/_app'];\n        const props = await utils_1.loadGetInitialProps(App, { Component, router: this, ctx });\n        if (cancel === this.componentLoadCancel) {\n            this.componentLoadCancel = null;\n        }\n        if (cancelled) {\n            const err = new Error('Loading initial props cancelled');\n            err.cancelled = true;\n            throw err;\n        }\n        return props;\n    }\n    async fetchRoute(route) {\n        return this.pageLoader.loadPage(route);\n    }\n    abortComponentLoad(as) {\n        if (this.componentLoadCancel) {\n            Router.events.emit('routeChangeError', new Error('Route Cancelled'), as);\n            this.componentLoadCancel();\n            this.componentLoadCancel = null;\n        }\n    }\n    notify(data) {\n        const { Component: App } = this.components['/_app'];\n        this.subscriptions.forEach((fn) => fn(Object.assign({}, data, { App })));\n    }\n    subscribe(fn) {\n        this.subscriptions.add(fn);\n        return () => this.subscriptions.delete(fn);\n    }\n}\nRouter.events = mitt_1.default();\nexports.default = Router;\nfunction toRoute(path) {\n    return path.replace(/\\/$/, '') || '/';\n}\n"]},"metadata":{},"sourceType":"script"}