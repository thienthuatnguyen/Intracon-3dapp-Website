{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mac/Documents/Intracon-3dapp-Website/app/src/components/ToggleContentParent.js\";\n\n/* eslint-disable react/forbid-prop-types */\n\n/* eslint-disable sx-a11y/click-events-have-key-events */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Image from '../services/image';\nimport RowItem from './UI/ItemSideMenu/RowItem';\nimport Icon from './UI/ItemSideMenu/Icon';\nimport Text from './UI/ItemSideMenu/Text';\nimport NewItem from './UI/ItemSideMenu/NewItem';\n\nclass ToggleContentParent extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      selectedIconUrl: '',\n      unSelectedIconUrl: ''\n    });\n\n    _defineProperty(this, \"onItemClick\", id => {\n      const getData = this.props.getData;\n      getData(id, true, false);\n    });\n  }\n\n  async componentDidMount() {\n    const _this$props = this.props,\n          selectedIcon = _this$props.selectedIcon,\n          unSelectedIcon = _this$props.unSelectedIcon;\n\n    if (selectedIcon) {\n      const selected = await Image.getUrl(selectedIcon);\n      const unselected = await Image.getUrl(unSelectedIcon);\n      this.setState({\n        selectedIconUrl: selected.data,\n        unSelectedIconUrl: unselected.data\n      });\n    }\n  }\n\n  render(props) {\n    const _this$state = this.state,\n          selectedIconUrl = _this$state.selectedIconUrl,\n          unSelectedIconUrl = _this$state.unSelectedIconUrl;\n    const _this$props2 = this.props,\n          viewed = _this$props2.viewed,\n          keyId = _this$props2.keyId,\n          id = _this$props2.id,\n          icon = _this$props2.icon,\n          title = _this$props2.title;\n    return React.createElement(RowItem, {\n      id: id,\n      className: id == keyId ? 'active row-item' : 'row-item',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      onClick: () => {\n        this.onItemClick(id);\n      },\n      className: \"icon-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, icon && this.getIcon(icon), id == keyId && selectedIconUrl && React.createElement(\"img\", {\n      src: selectedIconUrl,\n      alt: \"icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), id != keyId && unSelectedIconUrl && React.createElement(\"img\", {\n      src: unSelectedIconUrl,\n      alt: \"icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })), React.createElement(Text, {\n      onClick: () => {\n        this.onItemClick(id);\n      },\n      className: \"txt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, title), !viewed && React.createElement(NewItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }));\n  }\n\n}\n\nToggleContentParent.propTypes = {\n  keyId: PropTypes.any,\n  getData: PropTypes.func,\n  closeOutSide: PropTypes.any,\n  id: PropTypes.any,\n  title: PropTypes.string,\n  children: PropTypes.any,\n  icon: PropTypes.any,\n  selectedIcon: PropTypes.number,\n  unSelectedIcon: PropTypes.number,\n  viewed: PropTypes.bool\n};\nexport default ToggleContentParent;","map":{"version":3,"sources":["/Users/mac/Documents/Intracon-3dapp-Website/app/src/components/ToggleContentParent.js"],"names":["React","Component","PropTypes","Image","RowItem","Icon","Text","NewItem","ToggleContentParent","selectedIconUrl","unSelectedIconUrl","id","getData","props","componentDidMount","selectedIcon","unSelectedIcon","selected","getUrl","unselected","setState","data","render","state","viewed","keyId","icon","title","onItemClick","getIcon","propTypes","any","func","closeOutSide","string","children","number","bool"],"mappings":";;;AAAA;;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,OAAP,MAAoB,2BAApB;;AAEA,MAAMC,mBAAN,SAAkCP,SAAlC,CAA4C;AAAA;AAAA;;AAAA,mCAElC;AACNQ,MAAAA,eAAe,EAAE,EADX;AAENC,MAAAA,iBAAiB,EAAE;AAFb,KAFkC;;AAAA,yCAmB3BC,EAAD,IAAQ;AAAA,YACZC,OADY,GACA,KAAKC,KADL,CACZD,OADY;AAEpBA,MAAAA,OAAO,CAACD,EAAD,EAAK,IAAL,EAAW,KAAX,CAAP;AACD,KAtByC;AAAA;;AAO1C,QAAMG,iBAAN,GAA0B;AAAA,wBACiB,KAAKD,KADtB;AAAA,UAChBE,YADgB,eAChBA,YADgB;AAAA,UACFC,cADE,eACFA,cADE;;AAExB,QAAID,YAAJ,EAAkB;AAChB,YAAME,QAAQ,GAAG,MAAMd,KAAK,CAACe,MAAN,CAAaH,YAAb,CAAvB;AACA,YAAMI,UAAU,GAAG,MAAMhB,KAAK,CAACe,MAAN,CAAaF,cAAb,CAAzB;AACA,WAAKI,QAAL,CAAc;AACZX,QAAAA,eAAe,EAAEQ,QAAQ,CAACI,IADd;AAEZX,QAAAA,iBAAiB,EAAES,UAAU,CAACE;AAFlB,OAAd;AAID;AACF;;AAODC,EAAAA,MAAM,CAACT,KAAD,EAAQ;AAAA,wBACmC,KAAKU,KADxC;AAAA,UACJd,eADI,eACJA,eADI;AAAA,UACaC,iBADb,eACaA,iBADb;AAAA,yBAE+B,KAAKG,KAFpC;AAAA,UAEJW,MAFI,gBAEJA,MAFI;AAAA,UAEIC,KAFJ,gBAEIA,KAFJ;AAAA,UAEWd,EAFX,gBAEWA,EAFX;AAAA,UAEee,IAFf,gBAEeA,IAFf;AAAA,UAEqBC,KAFrB,gBAEqBA,KAFrB;AAGV,WACE,oBAAC,OAAD;AAAS,MAAA,EAAE,EAAEhB,EAAb;AAAiB,MAAA,SAAS,EAAGA,EAAE,IAAIc,KAAP,GAAiB,iBAAjB,GAAqC,UAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,OAAO,EAAE,MAAM;AAAE,aAAKG,WAAL,CAAiBjB,EAAjB;AAAsB,OAA7C;AAA+C,MAAA,SAAS,EAAC,WAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIe,IAAI,IAAI,KAAKG,OAAL,CAAaH,IAAb,CADZ,EAEIf,EAAE,IAAIc,KAAN,IAAehB,eAAf,IAAkC;AAAK,MAAA,GAAG,EAAEA,eAAV;AAA2B,MAAA,GAAG,EAAC,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFtC,EAGIE,EAAE,IAAIc,KAAN,IAAef,iBAAf,IAAoC;AAAK,MAAA,GAAG,EAAEA,iBAAV;AAA6B,MAAA,GAAG,EAAC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHxC,CADF,EAME,oBAAC,IAAD;AAAM,MAAA,OAAO,EAAE,MAAM;AAAE,aAAKkB,WAAL,CAAiBjB,EAAjB;AAAsB,OAA7C;AAA+C,MAAA,SAAS,EAAC,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiEgB,KAAjE,CANF,EAOI,CAACH,MAAD,IAAW,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPf,CADF;AAWH;;AAtCyC;;AAyC5ChB,mBAAmB,CAACsB,SAApB,GAAgC;AAC9BL,EAAAA,KAAK,EAAEvB,SAAS,CAAC6B,GADa;AAE9BnB,EAAAA,OAAO,EAAEV,SAAS,CAAC8B,IAFW;AAG9BC,EAAAA,YAAY,EAAE/B,SAAS,CAAC6B,GAHM;AAI9BpB,EAAAA,EAAE,EAAET,SAAS,CAAC6B,GAJgB;AAK9BJ,EAAAA,KAAK,EAAEzB,SAAS,CAACgC,MALa;AAM9BC,EAAAA,QAAQ,EAAEjC,SAAS,CAAC6B,GANU;AAO9BL,EAAAA,IAAI,EAAExB,SAAS,CAAC6B,GAPc;AAQ9BhB,EAAAA,YAAY,EAAEb,SAAS,CAACkC,MARM;AAS9BpB,EAAAA,cAAc,EAAEd,SAAS,CAACkC,MATI;AAU9BZ,EAAAA,MAAM,EAAEtB,SAAS,CAACmC;AAVY,CAAhC;AAaA,eAAe7B,mBAAf","sourcesContent":["/* eslint-disable react/forbid-prop-types */\n/* eslint-disable sx-a11y/click-events-have-key-events */\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Image from '../services/image'\nimport RowItem from './UI/ItemSideMenu/RowItem'\nimport Icon from './UI/ItemSideMenu/Icon'\nimport Text from './UI/ItemSideMenu/Text'\nimport NewItem from './UI/ItemSideMenu/NewItem'\n\nclass ToggleContentParent extends Component {\n\n  state = {\n    selectedIconUrl: '',\n    unSelectedIconUrl: ''\n  }\n\n  async componentDidMount() {\n    const { selectedIcon, unSelectedIcon } = this.props\n    if (selectedIcon) {\n      const selected = await Image.getUrl(selectedIcon)\n      const unselected = await Image.getUrl(unSelectedIcon)\n      this.setState({\n        selectedIconUrl: selected.data,\n        unSelectedIconUrl: unselected.data\n      })\n    }\n  }\n\n  onItemClick = (id) => {\n    const { getData } = this.props\n    getData(id, true, false)\n  }\n\n  render(props) {\n    const { selectedIconUrl, unSelectedIconUrl } = this.state\n    const { viewed, keyId, id, icon, title } = this.props\n      return (\n        <RowItem id={id} className={(id == keyId ) ? 'active row-item' : 'row-item'}>\n          <Icon onClick={() => { this.onItemClick(id) }} className='icon-menu'>\n            { icon && this.getIcon(icon) }\n            { id == keyId && selectedIconUrl && <img src={selectedIconUrl} alt='icon' /> }\n            { id != keyId && unSelectedIconUrl && <img src={unSelectedIconUrl} alt='icon' /> }\n          </Icon>\n          <Text onClick={() => { this.onItemClick(id) }} className='txt'>{ title }</Text>\n          { !viewed && <NewItem /> }\n        </RowItem>\n      )\n  }\n}\n\nToggleContentParent.propTypes = {\n  keyId: PropTypes.any,\n  getData: PropTypes.func,\n  closeOutSide: PropTypes.any,\n  id: PropTypes.any,\n  title: PropTypes.string,\n  children: PropTypes.any,\n  icon: PropTypes.any,\n  selectedIcon: PropTypes.number,\n  unSelectedIcon: PropTypes.number,\n  viewed: PropTypes.bool\n}\n\nexport default ToggleContentParent"]},"metadata":{},"sourceType":"module"}