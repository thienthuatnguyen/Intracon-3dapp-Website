{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { tuple } from \"../../utils\";\nexport const INPUT_DEFAULTS = {\n  sizes: tuple(\"small\", \"medium\", \"large\"),\n  states: tuple(\"focused\", \"hovered\"),\n  types: tuple(\"text\", \"email\", \"tel\", \"password\", \"number\", \"search\", \"color\", \"date\", \"time\")\n};\nexport const Input = forwardRefAs((_a, ref) => {\n  var className = _a.className,\n      color = _a.color,\n      readOnly = _a.readOnly,\n      rounded = _a.rounded,\n      size = _a.size,\n      state = _a.state,\n      isStatic = _a.static,\n      rest = tslib_1.__rest(_a, [\"className\", \"color\", \"readOnly\", \"rounded\", \"size\", \"state\", \"static\"]);\n\n  const isReadOnly = readOnly === true || isStatic === true;\n  return React.createElement(Generic, _Object$assign({\n    className: classNames(\"input\", {\n      [`is-${color}`]: color,\n      \"is-rounded\": rounded,\n      [`is-${size}`]: size,\n      \"is-static\": isStatic,\n      [`is-${state}`]: state\n    }, className),\n    readOnly: isReadOnly,\n    ref: ref\n  }, rest));\n}, {\n  as: \"input\"\n});\nInput.displayName = \"Input\";\nInput.propTypes = {\n  color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  readOnly: PropTypes.bool,\n  rounded: PropTypes.bool,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  state: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  static: PropTypes.bool,\n  type: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};","map":{"version":3,"sources":["../../../src/elements/form/input.tsx"],"names":[],"mappings":";;AAAA,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAP,MAAkB,OAAlB;AAEA,SAAS,YAAT,EAAuB,OAAvB,QAAsC,YAAtC;AAIA,SAAS,KAAT,QAAsB,aAAtB;AAEA,OAAO,MAAM,cAAc,GAAG;AAC5B,EAAA,KAAK,EAAE,KAAK,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,CADgB;AAE5B,EAAA,MAAM,EAAE,KAAK,CAAC,SAAD,EAAY,SAAZ,CAFe;AAG5B,EAAA,KAAK,EAAE,KAAK,CACV,MADU,EAEV,OAFU,EAGV,KAHU,EAIV,UAJU,EAKV,QALU,EAMV,QANU,EAOV,OAPU,EAQV,MARU,EASV,MATU;AAHgB,CAAvB;AAyCP,OAAO,MAAM,KAAK,GAAG,YAAY,CAC/B,CACE,EADF,EAWE,GAXF,KAYI;AAAA,MAVA,SAUA,GAJgB,EAIhB,CAVA,SAUA;AAAA,MATA,KASA,GAJgB,EAIhB,CATA,KASA;AAAA,MARA,QAQA,GAJgB,EAIhB,CARA,QAQA;AAAA,MAPA,OAOA,GAJgB,EAIhB,CAPA,OAOA;AAAA,MANA,IAMA,GAJgB,EAIhB,CANA,IAMA;AAAA,MALA,KAKA,GAJgB,EAIhB,CALA,KAKA;AAAA,MAJQ,QAIR,GAJgB,EAIhB,CAJA,MAIA;AAAA,MAHA,IAGA,GAHA,OAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAAA,WAAA,EAAA,OAAA,EAAA,UAAA,EAAA,SAAA,EAAA,MAAA,EAAA,OAAA,EAAA,QAAA,CAAA,CAGA;;AACF,QAAM,UAAU,GAAG,QAAQ,KAAK,IAAb,IAAqB,QAAQ,KAAK,IAArD;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,eAAA;AACN,IAAA,SAAS,EAAE,UAAU,CACnB,OADmB,EAEnB;AACE,OAAC,MAAM,KAAK,EAAZ,GAAiB,KADnB;AAEE,oBAAc,OAFhB;AAGE,OAAC,MAAM,IAAI,EAAX,GAAgB,IAHlB;AAIE,mBAAa,QAJf;AAKE,OAAC,MAAM,KAAK,EAAZ,GAAiB;AALnB,KAFmB,EASnB,SATmB,CADf;AAYN,IAAA,QAAQ,EAAE,UAZJ;AAaN,IAAA,GAAG,EAAE;AAbC,GAAA,EAcF,IAdE,CAAR,CADF;AAkBD,CAlC8B,EAmC/B;AAAE,EAAA,EAAE,EAAE;AAAN,CAnC+B,CAA1B;AAsCP,KAAK,CAAC,WAAN,GAAoB,OAApB;AACA,KAAK,CAAC,SAAN,GAAkB;AAChB,EAAA,KAAK,EAAE,SAAS,CAAC,SAAV,CAAoB,CAAC,SAAS,CAAC,MAAX,EAAmB,SAAS,CAAC,MAA7B,CAApB,CADS;AAEhB,EAAA,QAAQ,EAAE,SAAS,CAAC,IAFJ;AAGhB,EAAA,OAAO,EAAE,SAAS,CAAC,IAHH;AAIhB,EAAA,IAAI,EAAE,SAAS,CAAC,SAAV,CAAoB,CAAC,SAAS,CAAC,MAAX,EAAmB,SAAS,CAAC,MAA7B,CAApB,CAJU;AAKhB,EAAA,KAAK,EAAE,SAAS,CAAC,SAAV,CAAoB,CAAC,SAAS,CAAC,MAAX,EAAmB,SAAS,CAAC,MAA7B,CAApB,CALS;AAMhB,EAAA,MAAM,EAAE,SAAS,CAAC,IANF;AAOhB,EAAA,IAAI,EAAE,SAAS,CAAC,SAAV,CAAoB,CAAC,SAAS,CAAC,MAAX,EAAmB,SAAS,CAAC,MAA7B,CAApB;AAPU,CAAlB","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { tuple } from \"../../utils\";\nexport const INPUT_DEFAULTS = {\n    sizes: tuple(\"small\", \"medium\", \"large\"),\n    states: tuple(\"focused\", \"hovered\"),\n    types: tuple(\"text\", \"email\", \"tel\", \"password\", \"number\", \"search\", \"color\", \"date\", \"time\"),\n};\nexport const Input = forwardRefAs((_a, ref) => {\n    var { className, color, readOnly, rounded, size, state, static: isStatic } = _a, rest = tslib_1.__rest(_a, [\"className\", \"color\", \"readOnly\", \"rounded\", \"size\", \"state\", \"static\"]);\n    const isReadOnly = readOnly === true || isStatic === true;\n    return (React.createElement(Generic, Object.assign({ className: classNames(\"input\", {\n            [`is-${color}`]: color,\n            \"is-rounded\": rounded,\n            [`is-${size}`]: size,\n            \"is-static\": isStatic,\n            [`is-${state}`]: state,\n        }, className), readOnly: isReadOnly, ref: ref }, rest)));\n}, { as: \"input\" });\nInput.displayName = \"Input\";\nInput.propTypes = {\n    color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    readOnly: PropTypes.bool,\n    rounded: PropTypes.bool,\n    size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    state: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    static: PropTypes.bool,\n    type: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n//# sourceMappingURL=input.js.map"]},"metadata":{},"sourceType":"module"}