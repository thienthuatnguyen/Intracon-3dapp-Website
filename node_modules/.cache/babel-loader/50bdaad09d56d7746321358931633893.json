{"ast":null,"code":"import \"core-js/modules/es6.regexp.search\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mac/Documents/Intracon-3dapp-Website/app/src/components/SearchBox.js\";\nimport styled from 'styled-components';\nimport React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { IconSearch, IconLang } from './Icons';\nimport IconDocument from './IconDocument';\nimport Document from '../services/document';\nimport Language from './UI/ItemSideMenu/Language';\nimport RowItemDocument from './UI/ItemSideMenu/RowItemDocument';\nimport TextDocument from './UI/ItemSideMenu/TextDocument';\nimport NewItem from './UI/ItemSideMenu/NewItem';\nimport Icon from './UI/ItemSideMenu/Icon';\n\nclass SearchBox extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      value: '',\n      suggestions: []\n    });\n\n    _defineProperty(this, \"onChange\", (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    });\n\n    _defineProperty(this, \"onSuggestionsFetchRequested\", async ({\n      value\n    }) => {\n      const data = await this.getSuggestions(value);\n      this.setState({\n        suggestions: data\n      });\n    });\n\n    _defineProperty(this, \"onSuggestionsClearRequested\", () => {\n      this.setState({\n        suggestions: []\n      });\n    });\n\n    _defineProperty(this, \"getSuggestions\", async value => {\n      try {\n        const inputValue = value.trim().toLowerCase();\n        const result = await Document.search(inputValue);\n        return result.data;\n      } catch (err) {\n        // server error return empty  array\n        console.log(err);\n        return [];\n      }\n    });\n\n    _defineProperty(this, \"getSuggestionValue\", suggestion => suggestion.name);\n\n    _defineProperty(this, \"renderSuggestion\", suggestion => React.createElement(RowItemDocument, {\n      role: \"button\",\n      key: suggestion.id,\n      onClick: e => this.openDocument(suggestion),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(IconDocument, {\n      documentType: suggestion.documentType ? suggestion.documentType : suggestion.type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })), React.createElement(TextDocument, {\n      className: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, suggestion.name), suggestion.languages && suggestion.languages.length > 1 && React.createElement(Language, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(IconLang, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })), !suggestion.viewed && React.createElement(NewItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    })));\n  }\n\n  openDocument(document) {\n    window.location.href = `/content-viewer?menuId=${document.menuId}&document=${document.id}`;\n  }\n\n  render(props) {\n    const _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions;\n    const inputProps = {\n      placeholder: 'Consumables Safety Datasheets',\n      value,\n      onChange: this.onChange\n    };\n    return React.createElement(WrapperInputSearch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Autosuggest, {\n      id: \"result-search\",\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: this.getSuggestionValue,\n      renderSuggestion: this.renderSuggestion,\n      inputProps: inputProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"search-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(IconSearch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst WrapperInputSearch = styled.div.withConfig({\n  displayName: \"SearchBox__WrapperInputSearch\",\n  componentId: \"sc-1ieeey2-0\"\n})([\"display:flex;position:relative;input{font-size:14px;border:none;width:320px;color:\", \";padding-right:15px;}#react-autowhatever-result-search{position:absolute;width:calc(100% + 15px);background-color:\", \";border-left:1px solid \", \";top:45px;right:-15px;z-index:1000;}\"], props => props.theme.colorTextBody, props => props.theme.colorWhite, props => props.theme.colorBlue);\nexport default SearchBox;","map":{"version":3,"sources":["/Users/mac/Documents/Intracon-3dapp-Website/app/src/components/SearchBox.js"],"names":["styled","React","Component","Autosuggest","IconSearch","IconLang","IconDocument","Document","Language","RowItemDocument","TextDocument","NewItem","Icon","SearchBox","value","suggestions","event","newValue","setState","data","getSuggestions","inputValue","trim","toLowerCase","result","search","err","console","log","suggestion","name","id","e","openDocument","documentType","type","languages","length","viewed","document","window","location","href","menuId","render","props","state","inputProps","placeholder","onChange","onSuggestionsFetchRequested","onSuggestionsClearRequested","getSuggestionValue","renderSuggestion","WrapperInputSearch","div","theme","colorTextBody","colorWhite","colorBlue"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,SAArC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;;AAEA,MAAMC,SAAN,SAAwBX,SAAxB,CAAkC;AAAA;AAAA;;AAAA,mCACxB;AACNY,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,WAAW,EAAE;AAFP,KADwB;;AAAA,sCAMrB,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAyB;AAClC,WAAKC,QAAL,CAAc;AACZJ,QAAAA,KAAK,EAAEG;AADK,OAAd;AAGD,KAV+B;;AAAA,yDAYF,OAAO;AAAEH,MAAAA;AAAF,KAAP,KAAqB;AACjD,YAAMK,IAAI,GAAG,MAAM,KAAKC,cAAL,CAAoBN,KAApB,CAAnB;AACA,WAAKI,QAAL,CAAc;AACZH,QAAAA,WAAW,EAAEI;AADD,OAAd;AAGD,KAjB+B;;AAAA,yDAmBF,MAAM;AAClC,WAAKD,QAAL,CAAc;AACZH,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KAvB+B;;AAAA,4CAyBf,MAAOD,KAAP,IAAiB;AAChC,UAAI;AACF,cAAMO,UAAU,GAAGP,KAAK,CAACQ,IAAN,GAAaC,WAAb,EAAnB;AACA,cAAMC,MAAM,GAAG,MAAMjB,QAAQ,CAACkB,MAAT,CAAgBJ,UAAhB,CAArB;AACA,eAAOG,MAAM,CAACL,IAAd;AACD,OAJD,CAIE,OAAMO,GAAN,EAAW;AACX;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,eAAO,EAAP;AACD;AACF,KAnC+B;;AAAA,gDAqCXG,UAAU,IAAIA,UAAU,CAACC,IArCd;;AAAA,8CA2CZD,UAAD,IACjB,oBAAC,eAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,GAAG,EAAEA,UAAU,CAACE,EAFlB;AAGE,MAAA,OAAO,EAAEC,CAAC,IAAI,KAAKC,YAAL,CAAkBJ,UAAlB,CAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AAAc,MAAA,YAAY,EAAEA,UAAU,CAACK,YAAX,GAA0BL,UAAU,CAACK,YAArC,GAAoDL,UAAU,CAACM,IAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CALF,EAQE,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCN,UAAU,CAACC,IAA3C,CARF,EAUID,UAAU,CAACO,SAAX,IAAwBP,UAAU,CAACO,SAAX,CAAqBC,MAArB,GAA8B,CAAtD,IACA,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAXJ,EAeI,CAACR,UAAU,CAACS,MAAZ,IAAsB,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAf1B,CA5C8B;AAAA;;AAuChCL,EAAAA,YAAY,CAACM,QAAD,EAAW;AACrBC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAwB,0BAAyBH,QAAQ,CAACI,MAAO,aAAYJ,QAAQ,CAACR,EAAG,EAAzF;AACD;;AAsBDa,EAAAA,MAAM,CAACC,KAAD,EAAQ;AAAA,wBACmB,KAAKC,KADxB;AAAA,UACJhC,KADI,eACJA,KADI;AAAA,UACGC,WADH,eACGA,WADH;AAEZ,UAAMgC,UAAU,GAAG;AACjBC,MAAAA,WAAW,EAAE,+BADI;AAEjBlC,MAAAA,KAFiB;AAGjBmC,MAAAA,QAAQ,EAAE,KAAKA;AAHE,KAAnB;AAMA,WACE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AACE,MAAA,EAAE,EAAC,eADL;AAEE,MAAA,WAAW,EAAElC,WAFf;AAGE,MAAA,2BAA2B,EAAE,KAAKmC,2BAHpC;AAIE,MAAA,2BAA2B,EAAE,KAAKC,2BAJpC;AAKE,MAAA,kBAAkB,EAAE,KAAKC,kBAL3B;AAME,MAAA,gBAAgB,EAAE,KAAKC,gBANzB;AAOE,MAAA,UAAU,EAAEN,UAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAUE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,CADF;AAiBD;;AAxF+B;;AA2FlC,MAAMO,kBAAkB,GAAGtD,MAAM,CAACuD,GAAV;AAAA;AAAA;AAAA,oRAQXV,KAAK,IAAIA,KAAK,CAACW,KAAN,CAAYC,aARV,EAeAZ,KAAK,IAAIA,KAAK,CAACW,KAAN,CAAYE,UAfrB,EAgBKb,KAAK,IAAIA,KAAK,CAACW,KAAN,CAAYG,SAhB1B,CAAxB;AAuBA,eAAe9C,SAAf","sourcesContent":["import styled from 'styled-components'\nimport React, { Component } from 'react'\nimport Autosuggest from 'react-autosuggest'\nimport { IconSearch, IconLang } from './Icons'\nimport IconDocument from './IconDocument'\nimport Document from '../services/document'\nimport Language from './UI/ItemSideMenu/Language'\nimport RowItemDocument from './UI/ItemSideMenu/RowItemDocument'\nimport TextDocument from './UI/ItemSideMenu/TextDocument'\nimport NewItem from './UI/ItemSideMenu/NewItem'\nimport Icon from './UI/ItemSideMenu/Icon'\n\nclass SearchBox extends Component {\n  state = {\n    value: '',\n    suggestions: []\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    })\n  };\n\n  onSuggestionsFetchRequested = async ({ value }) => {\n    const data = await this.getSuggestions(value)\n    this.setState({\n      suggestions: data\n    })\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    })\n  };\n\n  getSuggestions = async (value) => {\n    try {\n      const inputValue = value.trim().toLowerCase()\n      const result = await Document.search(inputValue)\n      return result.data\n    } catch(err) {\n      // server error return empty  array\n      console.log(err)\n      return []\n    }\n  }\n  \n  getSuggestionValue = suggestion => suggestion.name\n\n  openDocument(document) {\n    window.location.href = `/content-viewer?menuId=${document.menuId}&document=${document.id}`\n  }\n\n  renderSuggestion = (suggestion) => (\n    <RowItemDocument\n      role='button'\n      key={suggestion.id}\n      onClick={e => this.openDocument(suggestion)}\n    >\n      <Icon>\n        <IconDocument documentType={suggestion.documentType ? suggestion.documentType : suggestion.type} />\n      </Icon>\n      <TextDocument className='text'>{suggestion.name}</TextDocument>\n      {\n        suggestion.languages && suggestion.languages.length > 1 && (\n        <Language>\n          <IconLang />\n        </Language>\n)}\n      { !suggestion.viewed && <NewItem /> }\n    </RowItemDocument>\n    )\n  \n  render(props) {\n    const { value, suggestions } = this.state\n    const inputProps = {\n      placeholder: 'Consumables Safety Datasheets',\n      value,\n      onChange: this.onChange\n    }\n\n    return (\n      <WrapperInputSearch>\n        <Autosuggest\n          id='result-search'\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={this.getSuggestionValue}\n          renderSuggestion={this.renderSuggestion}\n          inputProps={inputProps}\n        />\n        <div className='search-icon'>\n          <IconSearch />\n        </div>\n      </WrapperInputSearch>\n\n    )\n  }\n}\n\nconst WrapperInputSearch = styled.div`\n  display: flex;\n  position: relative;\n\n  input {\n    font-size: 14px;\n    border: none;\n    width: 320px;\n    color: ${props => props.theme.colorTextBody};\n    padding-right: 15px;\n  }\n\n  #react-autowhatever-result-search {\n    position: absolute;\n    width: calc(100% + 15px);\n    background-color: ${props => props.theme.colorWhite};\n    border-left: 1px solid ${props => props.theme.colorBlue};\n    top: 45px;\n    right: -15px;\n    z-index: 1000;\n  }\n`\n\nexport default SearchBox\n"]},"metadata":{},"sourceType":"module"}