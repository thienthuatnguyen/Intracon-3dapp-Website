{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { tuple } from \"../../utils\";\nimport { SelectOption } from \"./select-option\";\nexport const SELECT_CONTAINER_DEFAULTS = {\n  sizes: tuple(\"small\", \"medium\", \"large\"),\n  states: tuple(\"focused\", \"hovered\", \"loading\")\n};\n\nconst mapSelectContainerChildren = (children, state) => {\n  let classNameExtension;\n  const mapped = React.Children.map(children, (child, i) => {\n    if (typeof child === \"object\" && child !== null && \"type\" in child) {\n      if (child.type === \"select\" || child.type === Select) {\n        classNameExtension = classNames({\n          \"is-multiple\": child.props.multiple\n        });\n\n        if (state === \"focused\" || state === \"hovered\") {\n          return React.cloneElement(child, {\n            className: classNames(`is-${state}`, child.props.className)\n          });\n        }\n\n        return child;\n      } else if (child.type === React.Fragment) {\n        const fragmentMapped = mapSelectContainerChildren(child.props.children, state);\n        classNameExtension = classNames(classNameExtension, fragmentMapped.classNameExtension);\n        return React.createElement(React.Fragment, {\n          children: fragmentMapped.children\n        });\n      }\n    }\n\n    return child;\n  });\n  return {\n    children: mapped,\n    classNameExtension\n  };\n};\n\nexport const SelectContainer = forwardRefAs((_a, ref) => {\n  var className = _a.className,\n      children = _a.children,\n      color = _a.color,\n      fullwidth = _a.fullwidth,\n      rounded = _a.rounded,\n      size = _a.size,\n      state = _a.state,\n      rest = tslib_1.__rest(_a, [\"className\", \"children\", \"color\", \"fullwidth\", \"rounded\", \"size\", \"state\"]);\n\n  const mapped = mapSelectContainerChildren(children, state);\n  return React.createElement(Generic, _Object$assign({\n    className: classNames(\"select\", {\n      [`is-${color}`]: color,\n      \"is-fullwidth\": fullwidth,\n      \"is-loading\": state === \"loading\",\n      \"is-rounded\": rounded,\n      [`is-${size}`]: size\n    }, mapped.classNameExtension, className),\n    children: mapped.children,\n    ref: ref\n  }, rest));\n}, {\n  as: \"div\"\n});\nSelectContainer.displayName = \"Select.Container\";\nSelectContainer.propTypes = {\n  color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  fullwidth: PropTypes.bool,\n  rounded: PropTypes.bool,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  state: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nexport const Select = _Object$assign(forwardRefAs((props, ref) => React.createElement(Generic, _Object$assign({\n  ref: ref\n}, props)), {\n  as: \"select\"\n}), {\n  Container: SelectContainer,\n  Option: SelectOption\n});\nSelect.displayName = \"Select\";","map":{"version":3,"sources":["../../../src/elements/form/select.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { tuple } from \"../../utils\";\nimport { SelectOption } from \"./select-option\";\nexport const SELECT_CONTAINER_DEFAULTS = {\n    sizes: tuple(\"small\", \"medium\", \"large\"),\n    states: tuple(\"focused\", \"hovered\", \"loading\"),\n};\nconst mapSelectContainerChildren = (children, state) => {\n    let classNameExtension;\n    const mapped = React.Children.map(children, (child, i) => {\n        if (typeof child === \"object\" && child !== null && \"type\" in child) {\n            if (child.type === \"select\" || child.type === Select) {\n                classNameExtension = classNames({\n                    \"is-multiple\": child.props\n                        .multiple,\n                });\n                if (state === \"focused\" || state === \"hovered\") {\n                    return React.cloneElement(child, {\n                        className: classNames(`is-${state}`, child.props.className),\n                    });\n                }\n                return child;\n            }\n            else if (child.type === React.Fragment) {\n                const fragmentMapped = mapSelectContainerChildren(child.props\n                    .children, state);\n                classNameExtension = classNames(classNameExtension, fragmentMapped.classNameExtension);\n                return React.createElement(React.Fragment, { children: fragmentMapped.children });\n            }\n        }\n        return child;\n    });\n    return { children: mapped, classNameExtension };\n};\nexport const SelectContainer = forwardRefAs((_a, ref) => {\n    var { className, children, color, fullwidth, rounded, size, state } = _a, rest = tslib_1.__rest(_a, [\"className\", \"children\", \"color\", \"fullwidth\", \"rounded\", \"size\", \"state\"]);\n    const mapped = mapSelectContainerChildren(children, state);\n    return (React.createElement(Generic, Object.assign({ className: classNames(\"select\", {\n            [`is-${color}`]: color,\n            \"is-fullwidth\": fullwidth,\n            \"is-loading\": state === \"loading\",\n            \"is-rounded\": rounded,\n            [`is-${size}`]: size,\n        }, mapped.classNameExtension, className), children: mapped.children, ref: ref }, rest)));\n}, { as: \"div\" });\nSelectContainer.displayName = \"Select.Container\";\nSelectContainer.propTypes = {\n    color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    fullwidth: PropTypes.bool,\n    rounded: PropTypes.bool,\n    size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    state: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\nexport const Select = Object.assign(forwardRefAs((props, ref) => React.createElement(Generic, Object.assign({ ref: ref }, props)), {\n    as: \"select\",\n}), {\n    Container: SelectContainer,\n    Option: SelectOption,\n});\nSelect.displayName = \"Select\";\n//# sourceMappingURL=select.js.map"]},"metadata":{},"sourceType":"module"}